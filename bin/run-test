#!/usr/bin/perl

use warnings;
use strict;

use autodie qw(:all);
use DateTime;
use File::Slurp qw(read_file);

my %validators = (
    routinator         => [qw(0.11.0 0.12.0 0.14.0 main)],
    fort               => [qw(1.5.3 1.5.4 1.6.1 1.6.4)],
    'rpki-client'      => [qw(7.0 8.7 9.0 9.3 master)],
    octorpki           => [qw(1.4.3 1.4.4 1.5.10)],
    'ripe-validator'   => [qw(2.24)],
    'ripe-validator-3' => [qw(3.2-2021.04.07.12.55)],
);

my $max_159        = "730750818665451459101842416358141509827966271487";
my $max_159_plus_1 = "730750818665451459101842416358141509827966271488";
my $max_160        = "1461501637330902918203684832716283019655932542975";
my $max_160_plus_1 = "1461501637330902918203684832716283019655932542976";

my %test_name_to_fn = (
    'manifest-number-reuse'                  => \&manifest_number_reuse,
    'manifest-number-reuse-new-fn'           => \&manifest_number_reuse_new_fn,
    'manifest-number-regression'             => \&manifest_number_regression,
    'manifest-number-regression-post-expiry' => \&manifest_number_regression_post_expiry,
    'manifest-number-regression-new-fn'      => \&manifest_number_regression_new_fn,
    'manifest-number-largest-value-159'      => \&manifest_number_largest_value_159,
    'manifest-number-too-large-159'          => \&manifest_number_too_large_159,
    'manifest-number-largest-value-160'      => \&manifest_number_largest_value_160,
    'manifest-number-too-large-160'          => \&manifest_number_too_large_160,
    'manifest-thisupdate-reuse'              => \&manifest_thisupdate_reuse,
    'manifest-thisupdate-reuse-new-fn'       => \&manifest_thisupdate_reuse_new_fn,
    'manifest-thisupdate-regression'         => \&manifest_thisupdate_regression,
    'manifest-thisupdate-regression-new-fn'  => \&manifest_thisupdate_regression_new_fn,
    'manifest-thisupdate-largest-value'      => \&manifest_thisupdate_largest_value,
    'crl-number-reuse'                       => \&crl_number_reuse,
    'crl-number-reuse-new-fn'                => \&crl_number_reuse_new_fn,
    'crl-number-regression'                  => \&crl_number_regression,
    'crl-number-regression-new-fn'           => \&crl_number_regression_new_fn,
    'crl-number-largest-value-159'           => \&crl_number_largest_value_159,
    'crl-number-too-large-159'               => \&crl_number_too_large_159,
    'crl-number-largest-value-160'           => \&crl_number_largest_value_160,
    'crl-number-too-large-160'               => \&crl_number_too_large_160,
    'crl-lastupdate-reuse'                   => \&crl_lastupdate_reuse,
    'crl-lastupdate-reuse-new-fn'            => \&crl_lastupdate_reuse_new_fn,
    'crl-lastupdate-regression'              => \&crl_lastupdate_regression,
    'crl-lastupdate-regression-new-fn'       => \&crl_lastupdate_regression_new_fn,
    'crl-lastupdate-largest-value'           => \&crl_lastupdate_largest_value,
    'location-mismatch'                      => \&location_mismatch,
);

sub make_random_string
{
    my @chars = ('a'..'z', 0..9);

    return join '', map { $chars[int(rand(@chars))] } (1..8);
}

sub get_display_version
{
    my ($validator_version) = @_;

    my $display_version =
        ($validator_version =~ /\d/)
            ? "v$validator_version"
            : $validator_version;

    return $display_version;
}

sub issue_new_roa
{
    my ($name, $sia) = @_;

    my $asn = time();
    my $cmd = "issue-roa --name $name ".
              "--asn $asn --prefixes 255.0.0.0/24";
    if ($sia) {
        $cmd .= " --sia \"$sia\"";
    }
    system($cmd);
    print "Issued ROA with ASN $asn\n";

    return $asn;
}

sub verify_new_roa
{
    my ($vp, $count, $asn) = @_;

    my @roas = read_file("$vp/roas-common");
    if (@roas == $count) {
        print "Got expected number of ROAs ($count)\n";
    } else {
        print "Did not get expected number of ROAs ($count): ".
              "got ".(scalar @roas)." instead\n";
    }

    my @matches = grep { /$asn/ } @roas;
    if (@matches) {
        print "Found ROA matching ASN ($asn)\n";
    } else {
        print "Did not find ROA matching ASN ($asn)\n";
    }
}

sub manifest_thisupdate_reuse
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-thisupdate-reuse ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC');
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (specific this-update):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (specific this-update reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn);

    print "---\n";
}

sub manifest_thisupdate_reuse_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-thisupdate-reuse-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC');
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (specific this-update):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (specific this-update reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    sleep(1);

    my $asn2 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str ".
           "--mft-filename new.mft");
    print "Validator run (specific this-update reused, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn2);
    print "---\n";
}

sub manifest_thisupdate_regression
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-thisupdate-regression ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC')->subtract(minutes => 1);
    my $dt_str = $dt->strftime('%FT%T');

    my $asn = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (this-update regression):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn);
    print "---\n";
}

sub manifest_thisupdate_regression_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-thisupdate-regression-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC')->subtract(minutes => 1);
    my $dt_str = $dt->strftime('%FT%T');

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str");
    print "Validator run (this-update regression):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    sleep(1);

    my $asn2 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --this-update $dt_str ".
           "--mft-filename new.mft");
    print "Validator run (this-update regression, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn2);
    print "---\n";
}

sub manifest_thisupdate_largest_value
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-thisupdate-largest-value ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt =
        DateTime->new(
            year      => 9999,
            month     => 12,
            day       => 31,
            hour      => 23,
            minute    => 59,
            second    => 59,
            time_zone => 'UTC'
        );
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name ".
           "--this-update $dt_str --next-update $dt_str");
    print "Validator run (this-update largest value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name ".
           "--this-update $dt_str --next-update $dt_str");
    print "Validator run (this-update largest value reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    sleep(1);

    my $asn2 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-filename new.mft");
    print "Validator run (this-update regression with new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn2);
    print "---\n";
}

sub crl_lastupdate_reuse
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-lastupdate-reuse ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC');
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (specific CRL last-update):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (specific CRL last-update reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_lastupdate_reuse_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-lastupdate-reuse-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC');
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (specific CRL last-update):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (specific CRL last-update reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str ".
           "--crl-filename new.crl");
    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str ".
           "--crl-filename new.crl");
    print "Validator run (specific CRL last-update reused, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_lastupdate_regression
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-lastupdate-regression ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC')->subtract(minutes => 1);
    my $dt_str = $dt->strftime('%FT%T');

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (CRL last-update regression):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_lastupdate_regression_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-lastupdate-regression-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt = DateTime->now(time_zone => 'UTC')->subtract(minutes => 1);
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str");
    print "Validator run (CRL last-update regression):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str ".
           "--crl-filename new.crl");
    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-last-update $dt_str ".
           "--crl-filename new.crl");
    print "Validator run (CRL last-update regression, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub location_mismatch
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "location-mismatch ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");

    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version --rsync-only");
    print "Initial validator run (rsync):\n";
    system("run-validator $vp");
    print "End validator run\n";

    my $sia = "1.3.6.1.5.5.7.48.11;URI:rsync://blah.invalid/test/test.roa";
    my $asn1 = issue_new_roa($ta_name, $sia);
    system("reissue-crl-and-mft --name $ta_name");

    print "Validator run (SIA mismatch, rsync):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 0, $asn1);

    $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name");

    print "Validator run (SIA mismatch fixed, rsync):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);

    my $validator2_dir = make_random_string();
    my $vp2 = "/tmp/$validator2_dir";
    system("init-validator $vp2 last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run (RRDP):\n";
    system("run-validator $vp2");
    print "End validator run\n";

    $sia = "1.3.6.1.5.5.7.48.11;URI:rsync://blah.invalid/test/test2.roa";
    $asn1 = issue_new_roa($ta_name, $sia);
    system("reissue-crl-and-mft --name $ta_name");

    print "Validator run (SIA mismatch, RRDP):\n";
    system("run-validator $vp2");
    print "End validator run\n";
    verify_new_roa($vp2, 0, $asn1);

    $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name");

    print "Validator run (SIA mismatch fixed, RRDP):\n";
    system("run-validator $vp2");
    print "End validator run\n";
    verify_new_roa($vp2, 1, $asn1);
    print "---\n";
}

sub crl_lastupdate_largest_value
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-lastupdate-largest-value ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $dt =
        DateTime->new(
            year      => 9999,
            month     => 12,
            day       => 31,
            hour      => 23,
            minute    => 59,
            second    => 59,
            time_zone => 'UTC'
        );
    my $dt_str = $dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name ".
           "--crl-last-update $dt_str --crl-next-update $dt_str");
    print "Validator run (CRL last-update largest value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name ".
           "--crl-last-update $dt_str --crl-next-update $dt_str");
    print "Validator run (CRL last-update largest value reused):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-filename new.crl");
    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-filename new.crl");
    print "Validator run (CRL last-update regression, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_reuse
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-reuse ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number 1");
    print "Validator run (reused manifest number 1):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_reuse
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-reuse ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number 1");
    print "Validator run (reused CRL number 1):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_reuse_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-reuse-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 1");
    print "Validator run (reused CRL number 1):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 1 ".
           "--crl-filename new.crl");
    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number 1 ".
           "--crl-filename new.crl");
    print "Validator run (reused CRL number 1, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_regression
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-regression ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 3");
    print "Validator run (set CRL number to 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number 2");
    print "Validator run (set CRL number to 2):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_regression_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-regression-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 3");
    print "Validator run (set CRL number to 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 2");
    print "Validator run (set CRL number to 2):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number 2 ".
           "--crl-filename new.crl");
    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number 2 ".
           "--crl-filename new.crl");
    print "Validator run (reused CRL number 2, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_reuse_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-reuse-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 1");
    print "Validator run (reused manifest number 1):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number 1 ".
           "--mft-filename new.mft");
    print "Validator run (reused manifest number 1, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_regression_post_expiry
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-regression-post-expiry ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $start_dt   = DateTime->now(time_zone => 'UTC');
    # Make it a fairly long period, so that slow validators don't hit
    # the expiration date.
    my $expiry_dt  = $start_dt->clone()->add(seconds => 15);
    my $start_str  = $start_dt->strftime('%FT%T');
    my $expiry_str = $expiry_dt->strftime('%FT%T');

    system("reissue-crl-and-mft --name $ta_name --mft-number 3 ".
           "--this-update $start_str ".
           "--next-update $expiry_str");
    print "Validator run (manifest number 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(16);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number 2");
    print "Validator run (regression after manifest expiry):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_regression
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-regression ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 3");
    print "Validator run (manifest number 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number 2");
    print "Validator run (manifest number 2):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_regression_new_fn
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-regression-new-fn ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 3");
    print "Validator run (manifest number 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 2");
    print "Validator run (manifest number 2):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number 2 ".
           "--mft-filename new.mft");
    print "Validator run (manifest number 2, new filename):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_largest_value_159
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-largest-value-159 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number $max_159");
    print "Validator run (largest possible manifest number value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub manifest_number_too_large_159
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-too-large-159 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number $max_159_plus_1");
    print "Validator run (manifest number value is too large):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub manifest_number_largest_value_160
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-largest-value-160 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number $max_160");
    print "Validator run (largest possible manifest number value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub manifest_number_too_large_160
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "manifest-number-too-large-160 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --mft-number $max_160_plus_1");
    print "Validator run (manifest number value is too large):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_largest_value_159
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-largest-value-159 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number $max_159");
    print "Validator run (largest possible CRL number value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub crl_number_too_large_159
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-too-large-159 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number $max_159_plus_1");
    print "Validator run (CRL number value is too large):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

sub crl_number_largest_value_160
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-largest-value-160 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --crl-number $max_160");
    print "Validator run (largest possible CRL number value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub crl_number_too_large_160
{
    my ($validator_name, $validator_version) = @_;

    my $display_version = get_display_version($validator_version);
    print "crl-number-too-large-160 ($validator_name $display_version)\n";
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 255.0.0.0/24");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    my $asn1 = issue_new_roa($ta_name);
    system("reissue-crl-and-mft --name $ta_name --crl-number $max_160_plus_1");
    print "Validator run (CRL number value is too large):\n";
    system("run-validator $vp");
    print "End validator run\n";
    verify_new_roa($vp, 1, $asn1);
    print "---\n";
}

if (not @ARGV) {
    print "Usage: $0 {test-name} {validator-name} {validator-version}\n";
    print "\n";
    print "Test names:\n";
    print "  - manifest-number-reuse\n";
    print "  - manifest-number-reuse-new-fn\n";
    print "  - manifest-number-regression\n";
    print "  - manifest-number-regression-post-expiry\n";
    print "  - manifest-number-regression-new-fn\n";
    print "  - manifest-number-largest-value-159\n";
    print "  - manifest-number-too-large-159\n";
    print "  - manifest-number-largest-value-160\n";
    print "  - manifest-number-too-large-160\n";
    print "  - manifest-thisupdate-reuse\n";
    print "  - manifest-thisupdate-reuse-new-fn\n";
    print "  - manifest-thisupdate-regression\n";
    print "  - manifest-thisupdate-regression-new-fn\n";
    print "  - manifest-thisupdate-largest-value\n";
    print "  - crl-number-reuse\n";
    print "  - crl-number-reuse-new-fn\n";
    print "  - crl-number-regression\n";
    print "  - crl-number-regression-new-fn\n";
    print "  - crl-number-largest-value-159\n";
    print "  - crl-number-too-large-159\n";
    print "  - crl-number-largest-value-160\n";
    print "  - crl-number-too-large-160\n";
    print "  - crl-lastupdate-reuse\n";
    print "  - crl-lastupdate-reuse-new-fn\n";
    print "  - crl-lastupdate-regression\n";
    print "  - crl-lastupdate-regression-new-fn\n";
    print "  - crl-lastupdate-largest-value\n";
    print "  - location-mismatch\n";

    print "Validators:\n";
    for my $name (sort keys %validators) {
        my @versions = @{$validators{$name}};
        my $vstr = join ', ', @versions;
        print "  - $name ($vstr)\n";
    }
    print "\n";
    print "The string 'all' can also be used for each option,\n".
          "to test multiple versions of a validator, or multiple\n".
          "validators, or multiple tests.\n";
    exit(10);
}

my ($test_name, $validator_name, $validator_version) = @ARGV;

my @test_fns;
if ($test_name eq 'all') {
    @test_fns = @test_name_to_fn{qw(
        manifest-number-reuse
        manifest-number-reuse-new-fn
        manifest-number-regression
        manifest-number-regression-post-expiry
        manifest-number-regression-new-fn
        manifest-number-largest-value-159
        manifest-number-too-large-159
        manifest-number-largest-value-160
        manifest-number-too-large-160
        manifest-thisupdate-reuse
        manifest-thisupdate-reuse-new-fn
        manifest-thisupdate-regression
        manifest-thisupdate-regression-new-fn
        manifest-thisupdate-largest-value
        crl-number-reuse
        crl-number-reuse-new-fn
        crl-number-regression
        crl-number-regression-new-fn
        crl-number-largest-value-159
        crl-number-too-large-159
        crl-number-largest-value-160
        crl-number-too-large-160
        crl-lastupdate-reuse
        crl-lastupdate-reuse-new-fn
        crl-lastupdate-regression
        crl-lastupdate-regression-new-fn
        crl-lastupdate-largest-value
        location-mismatch
    )};
} else {
    my $test_fn = $test_name_to_fn{$test_name};
    if (not $test_fn) {
        die "Invalid test name '$test_name'";
    }
    @test_fns = ($test_fn);
}

system("/sbin/service rsync start >/dev/null");
system("/sbin/service nginx start >/dev/null");
for my $test_fn (@test_fns) {
    if ($validator_name eq 'all') {
        for my $name (sort keys %validators) {
            for my $version (@{$validators{$name}}) {
                $test_fn->($name, $version);
            }
        }
    } else {
        if ($validator_version eq 'all') {
            for my $version (@{$validators{$validator_name}}) {
                $test_fn->($validator_name, $version);
            }
        } else {
            $test_fn->($validator_name, $validator_version);
        }
    }
}

1;
