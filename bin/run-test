#!/usr/bin/perl

use warnings;
use strict;

use autodie qw(:all);

my %validators = (
    routinator    => [qw(0.11.0 0.12.0 0.13.2)],
    fort          => [qw(1.5.3 1.5.4 1.6.1)],
    'rpki-client' => [qw(7.0 8.7 9.0)],
    octorpki      => [qw(1.4.3 1.4.4 1.5.10)],
);

my %test_name_to_fn = (
    'manifest-number-reuse'         => \&manifest_number_reuse,
    'manifest-number-regression'    => \&manifest_number_regression,
    'manifest-number-largest-value' => \&manifest_number_largest_value,
    'manifest-number-too-large'     => \&manifest_number_too_large,
);

sub make_random_string
{
    my @chars = ('a'..'z', 0..9);

    return join '', map { $chars[int(rand(@chars))] } (1..8);
}

sub manifest_number_reuse
{
    my ($validator_name, $validator_version) = @_;

    print "manifest-number-reuse ($validator_name v$validator_version)\n";
    system("/sbin/service rsync start >/dev/null");
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 1234");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 1");
    print "Validator run (reused manifest number 1):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub manifest_number_regression
{
    my ($validator_name, $validator_version) = @_;

    print "manifest-number-regression ($validator_name v$validator_version)\n";
    system("/sbin/service rsync start >/dev/null");
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 1234");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 3");
    print "Validator run (manifest number 3):\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 2");
    print "Validator run (manifest number 2):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub manifest_number_largest_value
{
    my ($validator_name, $validator_version) = @_;

    print "manifest-number-largest-value ($validator_name v$validator_version)\n";
    system("/sbin/service rsync start >/dev/null");
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 1234");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 1461501637330902918203684832716283019655932542975");
    print "Validator run (largest possible manifest number value):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

sub manifest_number_too_large
{
    my ($validator_name, $validator_version) = @_;

    print "manifest-number-too-large ($validator_name v$validator_version)\n";
    system("/sbin/service rsync start >/dev/null");
    my $ta_name = make_random_string();
    system("setup-ca --name $ta_name --resources 1234");
    my $validator_dir = make_random_string();
    my $vp = "/tmp/$validator_dir";
    system("init-validator $vp last-tal-path ".
           "$validator_name $validator_version");
    print "Initial validator run:\n";
    system("run-validator $vp");
    print "End validator run\n";
    sleep(1);

    system("reissue-crl-and-mft --name $ta_name --mft-number 1461501637330902918203684832716283019655932542976");
    print "Validator run (manifest number value is too large):\n";
    system("run-validator $vp");
    print "End validator run\n";
    print "---\n";
}

if (not @ARGV) {
    print "Usage: $0 {test-name} {validator-name} {validator-version}\n";
    print "\n";
    print "Test names:\n";
    print "  - manifest-number-reuse\n";
    print "  - manifest-number-regression\n";
    print "  - manifest-number-largest-value\n";
    print "  - manifest-number-too-large\n";
    print "Validators:\n";
    for my $name (sort keys %validators) {
        my @versions = @{$validators{$name}};
        my $vstr = join ', ', @versions;
        print "  - $name ($vstr)\n";
    }
    print "\n";
    print "The string 'all' can also be used for each option,\n".
          "to test multiple versions of a validator, or multiple\n".
          "validators, or multiple tests.\n";
    exit(10);
}

my ($test_name, $validator_name, $validator_version) = @ARGV;

my @test_fns;
if ($test_name eq 'all') {
    @test_fns = @test_name_to_fn{qw(
        manifest-number-reuse
        manifest-number-regression
        manifest-number-largest-value
        manifest-number-too-large
    )};
} else {
    my $test_fn = $test_name_to_fn{$test_name};
    if (not $test_fn) {
        die "Invalid test name '$test_name'";
    }
    @test_fns = ($test_fn);
}

for my $test_fn (@test_fns) {
    if ($validator_name eq 'all') {
        for my $name (sort keys %validators) {
            for my $version (@{$validators{$name}}) {
                $test_fn->($name, $version);
            }
        }
    } else {
        if ($validator_version eq 'all') {
            for my $version (@{$validators{$validator_name}}) {
                $test_fn->($validator_name, $version);
            }
        } else {
            $test_fn->($validator_name, $validator_version);
        }
    }
}

1;
