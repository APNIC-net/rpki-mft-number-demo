#!/usr/bin/perl

use warnings;
use strict;

use Cwd qw(cwd);
use autodie qw(:all);
use File::Slurp qw(read_file write_file);

my ($state_dir, $tal_path, $validator, $version, $rsync_only) = @ARGV;

my $cwd = cwd();
if ($tal_path !~ /^\//) {
    $tal_path = "$cwd/$tal_path";
}
mkdir $state_dir;
chdir $state_dir;
mkdir "tals";
my ($real_tal_path) = read_file($tal_path);
system("cp $real_tal_path tals/tal.tal");

if ($validator eq 'routinator') {
    # Routinator is unable to use the RRDP service, for some reason.
    # The error messages are like so:
    # [2024-10-07T06:01:49] [DEBUG] starting new connection: https://localhost/
    # [2024-10-07T06:01:49] [WARN] RRDP https://localhost/mdb970tz/notification.xml: error sending request for url (https://localhost/mdb970tz/notification.xml)
    # [2024-10-07T06:01:49] [INFO] RRDP https://localhost/mdb970tz/notification.xml: Update failed and there is no current copy.
    # [2024-10-07T06:01:49] [INFO] RRDP https://localhost/mdb970tz/notification.xml: Falling back to rsync.
    $rsync_only = 1;

    my $le_11;
    if ($version eq 'main') {
        $le_11 = 0;
    } else {
        my @vord = split /\./, $version;
        $le_11 = ($vord[0] == 0 and $vord[1] <= 11);
    }

    mkdir "cache";
    my $exec = "/opt/routinator-$version/bin/routinator";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    if ($le_11) {
        write_file("run-validator-link",
                   "#!/bin/sh\n".
                   "rm -f log;\n".
                   "$exec ".
                   ($rsync_only ? "--disable-rrdp " : "").
                   "-r . ".
                   "-t tals ".
                   "--allow-dubious-hosts ".
                   "--logfile log ".
                   "vrps > vrps;\n".
                   "cat vrps | cut -d, -f1-3 | grep -v 'Max Length' > roas-common;\n".
                   "cat log");
    } else {
        write_file("run-validator-link",
                   "#!/bin/sh\n".
                   "rm -f log;\n".
                   "$exec ".
                   ($rsync_only ? "--disable-rrdp " : "").
                   "-r . ".
                   "--no-rir-tals ".
                   "--extra-tals-dir tals ".
                   "--allow-dubious-hosts ".
                   "--logfile log ".
                   "vrps > vrps;\n".
                   "cat vrps | cut -d, -f1-3 | grep -v 'Max Length' > roas-common;\n".
                   "cat log");
    }
} elsif ($validator eq 'rpki-client') {
    mkdir "cache";
    mkdir "output";
    my $exec = "/opt/rpki-client-$version/sbin/rpki-client";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    my $ge_93;
    if ($version eq 'master') {
      $ge_93 = 1;
    } else {
      my @vord = split /\./, $version;
      $ge_93 = ($vord[0] >= 9 and $vord[1] >= 3);
    }
    write_file("run-validator-link",
               "#!/bin/sh\n".
               # rpki-client >= 9.3 validates the TA certificate, but
               # requires that not-before be less than the current
               # time, so sleep for one second here to ensure that the
               # not-before time has been reached.
               ($ge_93 ? "sleep 1;\n" : "").
               "$exec ".
               ($rsync_only ? "-R " : "").
               "-c -t tals/tal.tal -d cache output >/dev/null;\n".
               "cat output/csv | cut -d, -f1-3 | grep -v 'Max Length' > roas-common;\n");
} elsif ($validator eq 'fort') {
    mkdir "cache";
    my $exec = "/opt/fort-$version/bin/fort";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    write_file("run-validator-link",
               "#!/bin/sh\n/opt/fort-$version/bin/fort ".
               ($rsync_only ? "--http.enabled=false " : "").
               "--tal tals ".
               "--local-repository cache ".
               "--output.roa roas ".
               "--mode standalone;\n".
               "cat roas | grep -v 'length' > roas-common;\n");
} elsif ($validator eq 'octorpki') {
    mkdir "cache";
    my $exec = "/opt/octorpki-$version/bin/octorpki";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    # Have to download the TA certificate separately, for some reason.
    system("mkdir -p cache/localhost/repo");
    system("mkdir -p cache/rpki.example.net/repo");
    my ($ta_path) = read_file("tals/tal.tal");
    chomp $ta_path;
    my $target = $ta_path;
    $target =~ s/rsync:\/\//cache\//;

    my $res = system("/usr/bin/rsync -vrlt $ta_path $target");
    if ($res != 0) {
        die "Unable to rsync TA certificate";
    }
    write_file("run-validator-link",
               "#!/bin/sh\n".
               "$exec ".
               ($rsync_only ? "-rrdp=false " :"").
               "-allow.root ".
               "-tal.root=tals/tal.tal ".
               "-mode=oneoff ".
               "-output.sign=false;\n".
               "octorpki-output-json-to-csvs output.json > roas-common;\n");
} elsif ($validator eq 'ripe-validator') {
    mkdir "cache";
    system("touch ripe-validator");
    my $exec = "/rpki-validator-rpki-validator-$version/rpki-validator-cli/target/rpki-validator-cli-$version-jar-with-dependencies.jar";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    write_file("run-validator-link",
               "#!/bin/bash\n".
               "java -jar $exec -t tals/tal.tal --output-dir ./cache -r roas >myout 2>&1;\n".
               "cat myout | grep -v 'PASSED' | grep -v 'is VALID';\n".
               "cat roas | grep -v 'Max Length' | cut -d, -f2-4 > roas-common;\n");
} elsif ($validator eq 'ripe-validator-3') {
    mkdir "cache";
    mkdir "rsync";
    my $port =
        ($$ + int(rand(1024))) % (65535 - 1024) + 1024;

    my @config = read_file("/rpki-validator-3-3.2-2021.04.07.12.55/rpki-validator/target/deb-conf/application.properties");
    my @new_config;
    for my $line (@config) {
        if ($line =~ /^#/) {
            next;
        }
        if ($line =~ /^\s*$/) {
            next;
        }
        chomp $line;
        my ($attr, $value) = ($line =~ /^(.*?)=(.*)$/);
        if ($attr eq 'server.port') {
            push @new_config, "$attr=$port";
        } elsif ($attr eq 'rpki.validator.data.path') {
            push @new_config, "$attr=$state_dir/cache";
        } elsif ($attr eq 'rpki.validator.preconfigured.trust.anchors.directory') {
            push @new_config, "$attr=$state_dir/tals";
        } elsif ($attr eq 'rpki.validator.rsync.local.storage.directory') {
            push @new_config, "$attr=$state_dir/rsync";
        } elsif ($attr eq 'management.endpoint.prometheus.enabled') {
            push @new_config, "$attr=false";
        } elsif ($attr eq 'rpki.validator.validated.objects.uri') {
            next;
        } elsif ($attr eq 'rpki.validator.rsync-only') {
            next;
        } else {
            push @new_config, $line;
        }
    }
    push @new_config,
         "rpki.validator.validated.objects.uri=http://rpki.example.net:$port/api/objects/validated";
    if ($rsync_only) {
        push @new_config,
            "rpki.validator.rsync-only=true";
    }
    for (@new_config) {
        $_ .= "\n";
    }
    write_file("$state_dir/deb.properties", @new_config);
    my $exec = "/rpki-validator-3-$version/rpki-validator/target/rpki-validator-3.2-SNAPSHOT.jar";
    if (not -e $exec) {
        die "Validator version number is invalid.";
    }
    system("chmod 755 /root/.sdkman/bin/sdkman-init.sh");

    write_file("run-validator-link",
               "#!/bin/bash\n".
               "java -Dspring.config.location=classpath:/application.properties,file:./deb.properties ".
               "-jar $exec >myout 2>&1 &\n".
               "sleep 10;\n".
               "curl http://rpki.example.net:$port/api/objects/validated > validated;\n".
               "killall -9 java;\n".
               "cat myout ".
               "| grep -e 'Tree validation succeeded' ".
                      "-e 'Validation result' ".
                      "-e 'Starting tree validation';\n".
               "ripe-validator-3-output-json-to-csvs validated > roas-common;\n");
} else {
    die "Invalid validator name '$validator'";
}

chmod 0755, "run-validator-link";
system("chown -R rpki-client:rpki-client $state_dir");

1;
